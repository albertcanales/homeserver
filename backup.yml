---
- hosts: homeserver
  gather_facts: yes
  become: yes

  vars_files:
    - secret.yml

  vars:
    mount_backup_drive: false
    backup_drive_uuid: 43a4c0a8-e533-4900-a2ee-78ea51d80de8
    backup_path: /data/backup
    timestamped_backup: false
    backup_files: false
    backup_containers: false
    container_start_stop: true
    backup_directories:
      - name: books
        should_backup: true
        path: "{{ books_path }}"
      - name: files
        should_backup: true
        path: "{{ files_path }}"
      - name: sync
        should_backup: true
        path: "{{ sync_path }}"
      - name: scans
        should_backup: true
        path: "{{ scans_path }}"
      - name: movies
        should_backup: false
        path: "{{ movies_path }}"
      - name: shows
        should_backup: false
        path: "{{ shows_path }}"
      - name: downloads
        should_backup: false
        path: "{{ downloads_path }}"
    

  tasks:
    - name: Ensure Backup Drive is mounted
      mount:
        src: "UUID={{ backup_drive_uuid }}"
        path: "{{ backup_path }}"
        fstype: ext4
        boot: false
        state: mounted
      when: mount_backup_drive

    - name: Ensure Backup directory exists
      file:
        path: "{{ backup_path }}"
        state: directory
      when: not mount_backup_drive

    - name: Get Backup Timestamp
      shell: date +%Y-%m-%d-%H-%M
      register: backtup_timestamp
      changed_when: false
      when: timestamped_backup

    - name: Set Timestamped Backup Destination facts
      set_fact: 
        backup_dest: "{{ backup_path }}/{{ backtup_timestamp.stdout }}"
        backup_volumes_dest: "{{ backup_path }}/{{ backtup_timestamp.stdout }}/volumes"
      when: timestamped_backup
    
    - name: Set Non Timestamped Backup Destination facts
      set_fact: 
        backup_dest: "{{ backup_path }}"
        backup_volumes_dest: "{{ backup_path }}/volumes"
      when: not timestamped_backup

    - name: Create Backup Directory
      file:
        path: "{{ backup_dest }}"
        state: directory

    # Backup files directory

    - name: Create files directory
      file:
        path: "{{ backup_path }}/files"
        state: directory
      when: backup_files
    
    - name: Backup files directory
      synchronize:
        src: "{{ files_path }}"
        dest: "{{ backup_path }}"
      delegate_to: "{{ inventory_hostname }}"
      when: backup_files

    # Backup container volumes

    - name: Backup Docker Services
      include_role:
        name: "{{ item }}"
        tasks_from: backup
      loop:
        - calibre
        - deluge
        - dockprom
        - freshrss
        - homeassistant
        - jellyfin
        - nextcloud
        - overleaf
        - radarr
        - sonarr
        - bazarr
        - prowlarr
      when: backup_containers

    # Backup media directory

    - name: Create data directories
      file:
        path: "{{ backup_path }}/{{ item.name }}"
        state: directory
      with_items: "{{ backup_directories }}"
      when: item.should_backup
    
    - name: Backup data directories
      synchronize:
        src: "{{ item.path }}"
        dest: "{{ backup_path }}"
      delegate_to: "{{ inventory_hostname }}"
      with_items: "{{ backup_directories }}"
      when: item.should_backup

    - name: Ensure Backup Drive is unmounted
      mount:
        path: "{{ backup_path }}"
        state: unmounted
      when: mount_backup_drive